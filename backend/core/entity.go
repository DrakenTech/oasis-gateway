package core

import "github.com/oasislabs/developer-gateway/rpc"

// ExecuteServiceRequest is is used by the user to trigger a service
// execution. A client is always subscribed to a subcription with
// topic "service" from which the client can retrieve the asynchronous
// results to this request
type ExecuteServiceRequest struct {
	// Data is a blob of data that the user wants to pass to the service
	// as argument
	Data string

	// Address where the service can be found
	Address string

	// Key is the identifier of the request issuer
	Key string
}

// ErrorEvent is the event that can be polled by the user
// as a result to a a request that failed
type ErrorEvent struct {
	// ID to identifiy an asynchronous response. It uniquely identifies the
	// event and orders it in the sequence of events expected by the user
	ID uint64 `json:"id"`

	// Cause is the error that caused the event to failed
	Cause rpc.Error
}

// ExecuteServiceEvent is the event that can be polled by the user
// as a result to a ServiceExecutionRequest
type ExecuteServiceEvent struct {
	// ID to identify an asynchronous response. It uniquely identifies the
	// event and orders it in the sequence of events expected by the user
	ID uint64 `json:"id"`

	// Address is the unique address that identifies the service,
	// is generated when a service is deployed and it can be used
	// for service execution
	Address string `json:"address"`

	// Output generated by the service at the end of its execution
	Output string `json:"output"`
}

// EventID is the implementation of rpc.Event for ExecuteServiceEvent
func (e ExecuteServiceEvent) EventID() uint64 {
	return e.ID
}

// EventID is the implementation of rpc.Event for ErrorEvent
func (e ErrorEvent) EventID() uint64 {
	return e.ID
}
